<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_mario_small_walk</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-5</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Player Parent

//Initialize variables
scr_player_create();

//Create effect
alarm[4] = 2;

//Cycle between palettes
isflashing = 0;
alarm[5] = 1;

//Create bubble effect
alarm[6] = 2;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Handle powerup specific projectiles

//If controls are not disabled
if (disablecontrol == false) {

    //If the player is not crouched down
    if (crouch == false) {
    
        //If the player has the fire powerup
        if (global.powerup == cs_fire) {
        
            //If there's less than 2 fireballs on screen
            if (instance_number(obj_fireball) &lt; 2) {
            
                firing = 6;
                with (instance_create(x+4*sign(xscale),y-12,obj_fireball)) {
                
                    hspeed = 3.5*other.xscale;
                    image_xscale = other.xscale;
                }
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="6">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create bubble effect when swimming

alarm[6] = 45+random_range(15,-15);
if (swimming == true)
    instance_create(x,bbox_top,obj_bubble);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Cycle between palettes

//Make the player flash if he's under the effects of the starman.
if (instance_exists(obj_invincibility)) {

    //Make the player flash.
    isflashing++;
    if (isflashing &gt; pal_swap_get_pal_count(palette_index)-1)
        isflashing = 0;
    
    //Repeat the process.
    if (obj_invincibility.alarm[0] &gt; 120)
        alarm[5] = 4;
    else
        alarm[5] = 16;
}
else {

    isflashing = 0;
    alarm[5] = 1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Make the player able to climb again

canhang = 0;
canturn = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Make the player to turn on beanstalks

canhang = 2;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Make the player blink when invulnerable

if (invulnerable == true) {

    image_alpha = !image_alpha;
    alarm[1] = 1;
}
else
    image_alpha = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Make the player vulnerable to all hazards

invulnerable = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Player Logic

//Floor collision
if (vspeed &gt;= 0) {

    //Check for the ground
    var semisolid = collision_rectangle(bbox_left,bbox_bottom,bbox_right,bbox_bottom+vspeed,obj_solid,0,0);
    
    //If there's ground to step in
    if (semisolid) 
    &amp;&amp; (bbox_bottom &lt; semisolid.yprevious+5) {
    
        //Stay above the ground
        y = semisolid.y-16;
        
        //Stop vertical speed
        vspeed = 0;
        gravity = 0;
        
        //Reset values
        event_user(15);
    }
    
    //Check for the ground
    var platform = collision_rectangle(bbox_left,bbox_bottom,bbox_right,bbox_bottom+vspeed,obj_platformparent,0,0);
    
    //If there's ground to step in
    if (platform) 
    &amp;&amp; (bbox_bottom &lt; platform.yprevious+5) {
    
        //Stay above the ground
        y = platform.y-16;
        
        //Stop vertical speed
        vspeed = 0;
        gravity = 0;
        
        //Reset values
        event_user(15);
    }
}

//If the player is not swimming
if (swimming == false) {

    //If the player is not climbing, set up 'Default' behaviour.
    if (state != cs_climb)
        event_user(3);
    
    //Otherwise if the player is climbing, set up 'Climbing' behaviour.
    else if (state == cs_climb)
        event_user(4);
}

//Otherwise if the player is swimming, set up 'Swimming' behaviour
else if (swimming == true)
    event_user(5);
    
//If the player is moving to the right and there's a wall on the way.
if (hspeed &gt; 0) 
&amp;&amp; (collision_rectangle(bbox_right,bbox_top+4,bbox_right+1,bbox_bottom-1,obj_solid,0,0)) {

    //Stop horizontal speed
    hspeed = 0;
    
    //Prevent the player from getting embed on the wall
    while (collision_rectangle(bbox_right,bbox_top+4,bbox_right,bbox_bottom-1,obj_solid,0,0))
    &amp;&amp; (!collision_point(x,bbox_top+4,obj_solid,0,0))
        x--;
}

//Otherwise, if the player is moving to the left and there's a wall on the way.
else if (hspeed &lt; 0)
&amp;&amp; (collision_rectangle(bbox_left-1,bbox_top+4,bbox_left,bbox_bottom-1,obj_solid,0,0)) {

    //Stop horizontal speed
    hspeed = 0;
    
    //Prevent the player from getting embed on the wall
    while (collision_rectangle(bbox_left,bbox_top+4,bbox_left,bbox_bottom-1,obj_solid,0,0))
    &amp;&amp; (!collision_point(x,bbox_top+4,obj_solid,0,0))
        x++;
}

//If the player is moving up
if (vspeed &lt; 0) 
&amp;&amp; (collision_rectangle(bbox_left,bbox_top-1,bbox_right,bbox_top,obj_solid,1,0)) {

    //Prevent the player from getting embed on a ceiling
    if (state &gt; cs_walk) {
    
        while (collision_rectangle(bbox_left,bbox_top+1,bbox_right,bbox_top+1,obj_solid,0,0))
            y++;
    }
            
    //Check for a item block
    var block = collision_rectangle(bbox_left,bbox_top-2,bbox_right,bbox_top,obj_blockparent,0,0);
    
    //If there's a item block in the way and this one can be hit
    if (block) 
    &amp;&amp; (block.state == 0) {
    
        //With the block
        with (block) {
        
            //Block has been hit
            state = 1;
            
            //Bump the block
            vspeed = -2;
            
            //Perform block specific events
            event_user(0);
        }
    }
    
    //Stop vertical movement
    vspeed = 0;
    
    //Play 'Bump' sound if not climbing
    if (state == cs_jump)
        audio_play_sound(snd_bump, 0, false);
}

//If the player is not climbing
if (state != cs_climb) {

    //If the player control is not disabled and it is not jumping.
    if (state != cs_jump)
    &amp;&amp; (disablecontrol == false) {
    
        //Make the player crouch down if the 'Down' key is held
        if (keyboard_check(vk_down))
        &amp;&amp; (!crouch)
            crouch = true;
            
        //Otherwise, make the player get up
        else if (!keyboard_check(vk_down))
            crouch = false;
    }
    
    //Handles powerup specific projectiles
    if (keyboard_check_pressed(vk_control))
        alarm[11] = 1;
}

//Make the player get up
else {

    crouch = false;
}

//Check for a nearby swimming surface
var water = collision_rectangle(bbox_left,y-1,bbox_right,y,obj_swim,1,0);

//If the player is not swimming and makes contact with a water surface
if (water) 
&amp;&amp; (swimming == false) {
    
    //Halve current horizontal speed
    hspeed = hspeed/2.5;    
    
    //Make the player swim.
    swimming = true;
    
    //Make the player get up
    crouch = false;
                
    //Stop vertical movement
    gravity = 0;
    if (vspeed &gt; 0)
        vspeed = 0;
}

//Otherwise, if the player had enough swimming and wants to get out
else if (!water) 
&amp;&amp; (swimming == true) {

    //If there's not water above and there's not a solid on the way out
    if (!collision_rectangle(bbox_left,bbox_top,bbox_right,bbox_top,obj_solid,0,0)) {
    
        //If the player is moving up
        if (vspeed &lt; 0) 
        &amp;&amp; (state == cs_jump) 
        &amp;&amp; (!instance_exists(obj_water)) {
        
            //If the 'Jump' key is pressed
            if (keyboard_check(vk_shift)) {
            
                //Play 'Jump' sound
                audio_play_sound(snd_jump, 0, false);
                
                //Make the player not swim
                swimming = false;
                
                //Allow variable jump
                jumping = 1;
                
                //Set the vertical speed
                vspeed = -jumpstr;
            }
            
            //Otherwise, if 'Shift' is not held.
            else {
            
                //If the player is moving up.
                if (vspeed &lt; 0)
                    vspeed = 0;
            }
        }
    }
}
    
//Free the player is he is stuck on a solid.
if (vspeed == 0)
&amp;&amp; (crouch == false) 
&amp;&amp; (mask_index == spr_mask_big) {
    
    //If the player gets stuck
    if (collision_rectangle(bbox_left,bbox_top+4,bbox_right,bbox_top+4,obj_solid,0,0)) 
    &amp;&amp; (inwall == 0) {
    
        //If the direction was not set
        if (direct2 == 0) {
        
            //Set it up
            direct2 = xscale;
        }
        
        //Begin movement
        inwall = 1;
        
        //Set the movement direction
        direct = -direct2;
    }
    
    //Otherwise, if the player gets stuck on a wall.
    else if (inwall == 1) {
        
        //Move the player until it's not embed in a wall.
        x += 1*sign(direct);       
        
        //If the player is not longer embed on a wall, make him able to move.
        if (!collision_rectangle(bbox_left,bbox_top,bbox_right,bbox_bottom,obj_solid,1,0)) {
        
            inwall = 0;
            direct2 = 0;
        }
        
        //If the player collides with a wall while being stuck
        if (collision_rectangle(bbox_left,y+4,bbox_left,bbox_bottom-4,obj_solid,1,0))
        || (collision_rectangle(bbox_right,y+4,bbox_right,bbox_bottom-4,obj_solid,1,0))
            direct = -direct;
    }
}

//Fixes a bug when being hit while stuck
if (global.powerup == 0)
|| (crouch == 1) {

    inwall = 0;
    direct2 = 0;
}

//Unstuck in case of overlapping a solid completely
if (state &lt; 2)
&amp;&amp; (inwall == 0)
    while (collision_rectangle(x-1,bbox_top,x+1,bbox_bottom,obj_solid,0,0))
        y--;
        
//If the player is not in contact with water.
if (!collision_rectangle(bbox_left,y,bbox_right,bbox_bottom,obj_swim,0,0))
&amp;&amp; (swimming == true)
    swimming = false;

//Prevent the player from going too high on the level
if (y &lt; -96) {

    if (inair == false)
        y = -96;
}
    
//Otherwise, if he is falling.
else {

    //If the player has been launched with a trampoline.
    if (inair) {
    
        if (y &gt; -96)
        &amp;&amp; (vspeed &gt; 0)
            inair = false;
    }

    //Make the player do stuff if he falls on a pit.
    else if ((bbox_bottom &gt;= room_height+32) &amp;&amp; (!instance_exists(obj_pitwarp))) {
    
        instance_create(x,y,obj_player_dead);
        instance_destroy();
        exit;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="25">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Reset values

//Allow jumping
jumping = 0;

//Reset combo
if (hitcombo &gt; 0)
    hitcombo = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="15">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Player Behaviour (Swim)

//Reset variables
event_user(15);

//Figure out player's state
if ((collision_rectangle(bbox_left,bbox_bottom,bbox_right,bbox_bottom+1,obj_solid,0,0))
|| (collision_rectangle(bbox_left,bbox_bottom,bbox_right,bbox_bottom+1,obj_platformparent,0,0)))
&amp;&amp; (gravity == 0) {

    //If not moving upwards
    if (vspeed &gt;= 0) {
    
        //Figure out if the player is idling or walking
        if (hspeed == 0)
            state = cs_idle;
        else
            state = cs_walk;
            
        //Reset jump delay
        statedelay = 0;
    }
    
    //Otherwise, if moving up
    else if (vspeed &lt; 0)
        state = cs_jump;
}

//Otherwise, if there's no ground below the player
else {

    if (statedelay &gt; 4)
        state = cs_jump;
    else
        statedelay++;
}
    
//Make the player get up if jumping and crouched down
if ((crouch == true) &amp;&amp; (state == cs_jump))
    crouch = false;
    
//If the controls are not disabled or the player is stuck in a wall
if (inwall == false)
&amp;&amp; (disablecontrol == false) {

    //Prevent the player from swimming too fast.
    if (vspeed &lt; -2) 
        vspeed = -2;
        
    //Prevent the player from diving too fast.
    if (vspeed &gt; 4)
        vspeed = 4;
    
    //Set up the maximum horizontal speed.
    if (state == cs_jump)
        hspeedmax = 2;
    else
        hspeedmax = 0.5;
        
    //If the player presses the 'Shift' key.
    if (keyboard_check_pressed(vk_shift)) 
    &amp;&amp; (!collision_rectangle(bbox_left,bbox_bottom-4,bbox_right,bbox_bottom+5,obj_trampoline,0,0)) {
    
        //Play 'Swim' sound
        audio_play_sound(snd_swim, 0, false);
    
        //Force 'Jump' state
        state = cs_jump;
        
        //If the player is on contact with a current object
        if (collision_rectangle(bbox_left,bbox_top,bbox_right,bbox_bottom,obj_current,0,0))
            vspeed = -2.5;
        else
            vspeed -= 1.5;
    }
    
    //If the player presses the 'Right' key and the 'Left' key is not held.
    if (keyboard_check(vk_right)) 
    &amp;&amp; (!crouch)
    &amp;&amp; (!keyboard_check(vk_left)) {
        
        //Set the facing direction
        xscale = 1;
        
        //If there's NOT a wall on the way.
        if (!collision_rectangle(bbox_right,bbox_top+4,bbox_right+1,bbox_bottom-1,obj_solid,1,0)) {
        
            //Set the horizontal speed.
            if (hspeed &gt;= 0) //If the player horizontal speed is equal/greater than 0.        
                hspeed += acc_swim;
            
            //Otherwise, If the player horizontal speed is lower than 0.
            else         
                hspeed += acc_swim*2;
        }
    }
    
    //If the player presses the 'Left' key and the 'Right' key is not held.
    else if (keyboard_check(vk_left)) 
    &amp;&amp; (!crouch)
    &amp;&amp; (!keyboard_check(vk_right)) {
        
        //Set the facing direction
        xscale = -1;
        
        //If there's NOT a wall on the way.
        if (!collision_rectangle(bbox_left-1,bbox_top+4,bbox_left,bbox_bottom-1,obj_solid,1,0)) {
        
            //Set the horizontal speed.
            if (hspeed &lt;= 0) //If the player horizontal speed is equal/lower than 0.        
                hspeed += -acc_swim;
                
            //Otherwise, If the player horizontal speed is greater than 0. 
            else        
                hspeed += -acc_swim*2;
        }      
    }
    
    //Otherwise, if neither of the 'Left' key or 'Right' key is not held.
    else if (vspeed == 0) { //If the player is on the ground.
    
        //Reduce the player speed until he stops.
        hspeed = max(0,abs(hspeed)-dec_swim)*sign(hspeed);
        
        //Set up horizontal speed to 0 when hspeed hits the value given on 'dec_swim'.
        if ((hspeed &lt; dec_swim) &amp;&amp; (hspeed &gt; -dec_swim))      
            hspeed = 0;     
    }
}

//Otherwise, If the player controls are disabled.
else if (disablecontrol) {

    //Reduce the player speed until he stops.
    hspeed = max(0,abs(hspeed)-dec_swim)*sign(hspeed);
    
    //Set up horizontal speed to 0 when hspeed hits the value given on 'dec_swim'.
    if ((hspeed &lt; dec_swim) &amp;&amp; (hspeed &gt; -dec_swim))    
        hspeed = 0;        
}

//Prevent the player from sliding too fast.
if (hspeed &gt; hspeedmax)
    hspeed = hspeedmax;
if (hspeed &lt; -hspeedmax)
    hspeed = -hspeedmax;
    
//Apply ygrav
if ((state == cs_jump) || (statedelay &gt; 0))
    gravity = grav_swim;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="14">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Player Behaviour (Climb)

//Reset jump state delay
statedelay = 0;

//Reset jump variable
jumping = 0;

//If the player can turn it's direction
if (canhang == 2) {

    //If 'Right' is pressed
    if (keyboard_check(vk_right)) {
    
        //Set the facing direction
        xscale = -1;
        
        //Release the vine if the key has been held enough
        canturn++;
        if (canturn &gt; 19) {
        
            //Force set jump state
            state = cs_jump;
            
            //Disallow climbing
            alarm[3] = 12;     
            canhang = 3;
            
            //Set movement
            hspeed = -(minspd/1.3)*xscale;
            
            //Set the facing direction
            xscale = 1*sign(hspeed);
        }    
    }
    
    //Otherwise, if 'Left' is pressed
    else if (keyboard_check(vk_left)) {
    
        //Set the facing direction
        xscale = 1;
        
        //Release the vine if the key has been held enough
        canturn++;
        if (canturn &gt; 19) {
        
            //Force set jump state
            state = cs_jump;
            
            //Allow climbing
            alarm[3] = 12;
            canhang = 3;
            
            //Set movement
            hspeed = -(minspd/1.3)*xscale;
            
            //Set the facing direction
            xscale = 1*sign(hspeed);
        }
    }
    
    //Otherwise, reset turning variable
    else
        canturn = 0;
}
    
//Move up if 'Up' is held.
if ((keyboard_check(vk_up)) &amp;&amp; (!keyboard_check(vk_down))) {

    if (!collision_rectangle(bbox_left,y,bbox_right,y,obj_climb,0,0))
        vspeed = 0;
    else
        vspeed = -1;
}

//Move down if 'Down' is held.
else if ((keyboard_check(vk_down)) &amp;&amp; (!keyboard_check(vk_up))) {

    //Move downwards
    vspeed = 1;

    //Check for ground
    while (collision_rectangle(bbox_left,bbox_bottom,bbox_right,bbox_bottom+vspeed,obj_solid,0,0))
        y--;
}

//Otherwise, stop the player
else
    vspeed = 0;

//Make the player jump.
if (keyboard_check_pressed(vk_shift)) {

    //Play 'Jump' sound
    audio_play_sound(snd_jump, 0, false);   
    
    //Force set 'Jump' state
    state = cs_jump;
    
    //Disallow climbing
    alarm[3] = 12;
    canhang = 3;
    
    //End variable jumping
    jumping = 1;
        
    //Set movement
    vspeed = -jumpstr;
    hspeed = -minspd*xscale;
    
    //Move Mario 8 pixels
    x -= 8*sign(xscale);     
    
    //Set the facing direction
    xscale = 1*sign(hspeed);
}

//Makes the player move down when there's not a climbable surface above.
if (!collision_rectangle(bbox_left,y,bbox_right,y+16,obj_climb,0,0)) {

    if (vspeed &lt; 0)
        vspeed = 0
    else {
    
        //Force set 'Jump' state
        state = cs_jump;
                    
        //Disallow climbing
        alarm[3] = 12;
        canhang = 3;
        
        //Move Mario 8 pixels
        x -= 8*sign(xscale);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="13">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Player Behaviour

//Figure out player's state
if ((collision_rectangle(bbox_left,bbox_bottom,bbox_right,bbox_bottom+1,obj_solid,0,0))
|| (collision_rectangle(bbox_left,bbox_bottom,bbox_right,bbox_bottom+1,obj_platformparent,0,0)))
&amp;&amp; (gravity == 0) {

    //If not moving upwards
    if (vspeed &gt;= 0) {
    
        //Figure out if the player is idling or walking
        if (hspeed == 0)
            state = cs_idle;
        else
            state = cs_walk;
            
        //Reset jump delay
        statedelay = 0;
    }
    
    //Otherwise, if moving up
    else if (vspeed &lt; 0)
        state = cs_jump;
}

//Otherwise, if there's no ground below the player
else {

    if (statedelay &gt; 4)
        state = cs_jump;
    else
        statedelay++;
}

//Prevent the player from falling too fast
if (vspeed &gt; 4)
    vspeed = 4;
    
//Set up the maximum horizontal speed
if (keyboard_check(vk_control)) 
    hspeedmax = maxspd;
else
    hspeedmax = minspd;
    
//If the controls are not disabled or the player is stuck in a wall
if (inwall == false)
&amp;&amp; (disablecontrol == false) {

    //If the 'Shift' key is pressed and the player can jump
    if (keyboard_check_pressed(vk_shift))
    &amp;&amp; ((jumping == 0) 
    &amp;&amp; (state &lt; cs_jump)) 
    &amp;&amp; (!collision_rectangle(bbox_left,bbox_bottom-4,bbox_right,bbox_bottom+5,obj_trampoline,0,0)) {
    
        //Play 'Jump' sound
        audio_play_sound(snd_jump, 0, false);
        
        //Variable jump
        jumping = 1;         
        
        //Force jump state
        state = cs_jump;        
                 
        //Set the vertical speed
        vspeed = -jumpstr+abs(hspeed)/7.5*-1;
    }
    
    //Check if the player should still be variable jumping
    if (keyboard_check_released(vk_shift))
    &amp;&amp; (jumping == 1)
        jumping = 2;
    
    //Allow the player to move or not
    event_user(2);
    
    //If the 'Right' key is pressed and the player can move on it's own
    if (keyboard_check(vk_right)) 
    &amp;&amp; (move == true) 
    &amp;&amp; (!keyboard_check(vk_left)) {
            
        //Check up the player's horizontal speed
        if (hspeed &lt; hspeedmax) {
        
            //If the player horizontal speed is equal or greater than 0, accelerate slower.
            if (hspeed &gt;= 0) {
                
                if ((state == cs_jump)
                || (statedelay &gt; 0))
                &amp;&amp; (xscale = -1)
                    hspeed += acc/1.5;
                else
                    hspeed += acc;
            }
                
            //Otherwise, accelerate a bit faster
            else if (hspeed &lt; 0) {
            
                //Double acceleration if skidding
                if (sprite_index == scr_mario_skid)
                || (sprite_index == scr_luigi_skid)
                    hspeed += accskid*1.25;
                else
                    hspeed += accskid;
            }
        }
        
        //If the player is not overlapping a wall, set the facing direction
        if (!collision_rectangle(bbox_left,bbox_top+4,bbox_right,bbox_top+4,obj_solid,0,0))
        &amp;&amp; ((state != cs_jump)
        || (statedelay == 0))
            xscale = 1;
    }
    
    //Otherwise if the 'Left' key is pressed and the player can move on it's own
    else if (keyboard_check(vk_left))
    &amp;&amp; (move == true)
    &amp;&amp; (!keyboard_check(vk_right)) {
            
        //Check up the player's horizontal speed
        if (hspeed &gt; hspeedmax*-1) {
                
            //If the player horizontal speed is equal or lower than 0, accelerate slower.
            if (hspeed &lt;= 0) {
            
                if ((state == cs_jump)
                || (statedelay &gt; 0))
                &amp;&amp; (xscale = 1)
                    hspeed -= acc/1.5;
                else
                    hspeed -= acc;
            }
                
            //Otherwise, accelerate a bit faster
            else if (hspeed &gt; 0) {
            
                //Double acceleration if skidding
                if (sprite_index == scr_mario_skid)
                || (sprite_index == scr_luigi_skid)
                    hspeed -= accskid*1.25;
                else
                    hspeed -= accskid;
            }       
        }
        
        //If the player is not overlapping a wall, set the facing direction
        if (!collision_rectangle(bbox_left,bbox_top+4,bbox_right,bbox_top+4,obj_solid,0,0))
        &amp;&amp; ((state != cs_jump)
        || (statedelay == 0))
            xscale = -1;
    }
    
    //Otherwise, if neither 'Right' or 'Left' are pressed and the player is on the ground
    else if (gravity == 0) {
    
        //If the player is not crouched down
        if (crouch == false) {
        
            //Reduce the player's horizontal speed
            hspeed = max(0, abs(hspeed)-dec)*sign(hspeed);
            
            //Slowdown until the player stops
            if (hspeed &lt; dec) &amp;&amp; (hspeed &gt; -dec)
                hspeed = 0; 
        }
        
        //Otherwise if the player is crouched down, slowdown slower
        else if (crouch == true) {
        
            //Reduce the player's horizontal speed
            hspeed = max(0, abs(hspeed)-decskid)*sign(hspeed);
            
            //Slowdown until the player stops
            if (hspeed &lt; decskid) &amp;&amp; (hspeed &gt; -decskid)
                hspeed = 0; 
        }
    }
}

//Otherwise if controls are disabled or the player is stuck in a wall.
else if (gravity == 0) {

    //If the player is not crouched down
    if (crouch == false) {
    
        //Reduce the player's horizontal speed
        hspeed = max(0, abs(hspeed)-dec)*sign(hspeed);
        
        //Slowdown until the player stops
        if (hspeed &lt; dec) &amp;&amp; (hspeed &gt; -dec)
            hspeed = 0; 
    }
    
    //Otherwise if the player is crouched down, slowdown slower
    else if (crouch == true) {
    
        //Reduce the player's horizontal speed
        hspeed = max(0, abs(hspeed)-decskid)*sign(hspeed);
        
        //Slowdown until the player stops
        if (hspeed &lt; decskid) &amp;&amp; (hspeed &gt; -decskid)
            hspeed = 0; 
    }    
}

//Prevent the player from moving too fast if not jumping
if (state != cs_jump) {

    //Check the horizontal speed when moving to the right.
    if (hspeed &gt; hspeedmax)
        hspeed = hspeedmax;
        
    //Check the horizontal speed when moving to the left.
    else if (hspeed &lt; hspeedmax*-1)
        hspeed = hspeedmax*-1
}

//If the player is jumping
if (statedelay &gt; 0)
|| (state == cs_jump) {

    //If the player is not jumping, descend slowly
    if (jumping == 0)
    &amp;&amp; (statedelay &lt; 4)
        gravity = grav_alt/8;
    
    else {
        //Variable jumping
        if (vspeed &lt; -2) 
        &amp;&amp; (jumping == 1)
            gravity = grav_alt;
        
        //Otherwise, use default gravity.     
        else {
            
            //Use default gravity
            gravity = grav;
                    
            //End variable jumping if it never ends manually.
            if (jumping = 1)
                jumping = 2;
        }
    }
}

//Check for a climbing surface
var climb1 = collision_point(x,y,obj_climb,0,0);
var climb2 = collision_point(x,y+15,obj_climb,0,0);

//If there's a climbable surface
if (climb1)
&amp;&amp; (climb2)
&amp;&amp; (canhang == 0)
&amp;&amp; (disablecontrol == false) {
        
    //If the horizontal speed is greater than 0, face to the right
    if (hspeed &gt; 0) {
    
        xscale = 1;
        x = climb1.x+8;
    }
        
    //Otherwise, if the horizontal speed is lower than 0, face to the left
    else if (hspeed &lt; 0) {
    
        xscale = -1;
        x = climb1.x+8;
    }
    
    //Force set 'Climb' state
    state = cs_climb;
    
    //Stop
    speed = 0;
    gravity = 0; 
    
    //Hang in
    canhang = 1;
    
    //Allow turning
    alarm[2] = 8;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="12">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Toggle movement when crouched down

//If the player is crouched down
if (crouch == true) {

    //If the player is jumping, allow movement
    if (state == cs_jump)
        move = true;
        
    //Otherwise, do not allow movement
    else
        move = false;
}

//Otherwise, allow movement
else 
    move = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Make the player bounce

//Set the vertical speed
vspeed = -4;

//Boost jump
y--;

//Switch to jump state
state = cs_jump;

//Prevent variable jumping
if (global.physics)
&amp;&amp; (keyboard_check(vk_shift))
    jumping = 1;
else
    jumping = 2;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Hurt the player

//If not invulnerable
if (invulnerable == 0) {

    //If the player is not small
    if (global.powerup &gt; cs_small) {
    
        //Play 'Warp' sound
        audio_play_sound(snd_warp, 0, false);
        
        //Perform animation sequence
        with (instance_create(x,y,obj_player_transform)) {
        
            //If the player has the fire powerup, set 'Fire to Small' sequence.
            if (global.powerup == cs_fire)
                sequence = 3;
                
            //Otherwise, set 'Super to Small sequence.
            else
                sequence = 2;
        }
        
        //Set small powerup
        global.powerup = cs_small;
    }
    
    //Otherwise, kill the player
    else {
      
        instance_create(x,y,obj_player_dead);
        instance_destroy();
        exit;     
    }
    
    //Become invulnerable
    invulnerable = 1;
    
    //Become vulnerable
    alarm[0] = 192;
    alarm[1] = 1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw the player

//Set the shader
pal_swap_set(palette_index, isflashing, false);

//Draw sprite
draw_sprite_ext(sprite_index, -1, x, y, xscale, 1, 0, c_white, image_alpha);

//Reset shader
pal_swap_reset();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
