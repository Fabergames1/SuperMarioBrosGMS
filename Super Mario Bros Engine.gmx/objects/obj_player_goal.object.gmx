<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_mario_small_climb</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-5</depth>
  <persistent>0</persistent>
  <parentName>obj_physicsparent</parentName>
  <maskName>spr_mask_big</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///The player on the flagpole

//Default flagpole
flagpole = -1;

//Play the flagpole sound
audio_play_sound(snd_flagpole, 0, false);

//Move down
vspeed = 2;

//Start moving
alarm[0] = 80;

//Stop both music and timer
with (obj_levelcontrol) {

    musicdisable = true;
    alarm[1] = 1;
    alarm[2] = 0;
}

//Forget check points
global.checkpoint = noone;
global.checkpointroom = noone;

//State
ready = 0;
ready2 = 0;
ready3 = 0;

//Get number of fireworks
if (global.time -(floor(global.time/10)*10) == 6) 
    global.fireworks = 6;
else if (global.time -(floor(global.time/10)*10) == 3) 
    global.fireworks = 3;
else if (global.time -(floor(global.time/10)*10) == 1) 
    global.fireworks = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Go to the level start screen

//Disable pixel effect
with (obj_persistent) tr_pixel = 0;

//Go to level start screen
room_goto(rm_levelstart);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create fireworks
    
//If there's not fireworks
if (global.fireworks == 0)    
    alarm[5] = 120;

else {

    //If there's more than 1 fireworks
    if (global.fireworks &gt; 1) {
    
        //Play 'Firework' sound
        audio_play_sound(snd_firework, 0, false);
    
        //Spawn a firework
        with (instance_create(obj_incastle.x+random_range(-64,48), view_yview[0]+random_range(32,64), obj_smoke)) {
        
            sprite_index = spr_firework;
            move_snap(16,16);
            score += 500;
            image_speed = 0.3;
        }
          
        //Decrease amount of firework
        global.fireworks--;
        
        //Repeat
        alarm[4] = 30;
    }
    else {
    
        //Play 'Firework' sound
        audio_play_sound(snd_firework, 0, false);
            
        //Spawn a firework
        with (instance_create(obj_incastle.x+random_range(-64,48), view_yview[0]+random_range(32,64), obj_smoke)) {
        
            sprite_index = spr_firework;
            move_snap(16,16);
            score += 500;
            image_speed = 0.3;
        }
          
        //Decrease amount of firework
        global.fireworks = 0;
        
        //Repeat
        alarm[5] = 120;        
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Start moving again

ready2 = 2;
depth = 14;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Return to the map after the music is done playing.

if (!audio_is_playing(bgm_courseclear)) {

    //Create in-castle flag
    if (instance_number(obj_flagc) == 0)    
        instance_create(obj_incastle.x-8,obj_incastle.y-64,obj_flagc);
}
else
    alarm[2] = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Take points off the time, and add to the score

//If there is no time left
if (global.time == 0) 
    alarm[2] = 1;

//Otherwise
else {

    //Decrement a second from the timer
    if (global.time &gt; 0) {
    
        //Decrement
        global.time--;
        
        //Get 50 points/second
        score += 50;
        
        //Repeat the process
        alarm[1] = 1;
        
        //Begin timer loop
        if (global.time &gt; 1) {
        
            if (!audio_is_playing(snd_count))
                audio_play_sound(snd_count, 0, true);
        }
        else if (global.time == 1) {
        
            audio_stop_sound(snd_count);
            audio_play_sound(snd_countend, 0, false);
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Start walking to the goal castle

//Physics state
ready = 2;

//Move right 8 pixels
x += 8;

//Face right
image_xscale = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Player goal logic

//When in the physics or countdown state
if ((ready == 2) || (ready == 3)) {

    //Prevent physics parent from destroying (Hack)
    if (bbox_top &gt; room_height) {
    
        //If it's moving to the right...
        if (ready = 2) then hspeed = -1
        
        //Stay invisible on the bottom of the view
        y = room_height-32;
        visible = 0;
    }

    //Default event
    event_inherited();

    //If Mario reached a wall or fell out of the room when in the physics state
    if (ready = 2) {
    
        if (hspeed &lt; 0) {

            //Countdown state
            ready = 3;
    
            //Begin countdown state
            event_user(15);
    
            //Stop walking
            hspeed = 0;
        }
        else {
        
            if (ready2 != 1) {
            
                //Set horizontal speed
                hspeed += 0.07;
                if (hspeed &gt; 1.5)
                    hspeed = 1.5;
            }
        }
    }
}

//Animate
event_user(13);

//Enter castle
event_user(14);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_flagpole">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///When the player reaches the bottom of the flagpole

if (ready == 0) 
&amp;&amp; (y &gt; other.y+136) {

    //Do not animate
    image_speed = 0;
    image_index = 0;

    //Stop moving
    vspeed = 0;

    //Snap to bottom of the flagpole
    y = other.y+136;

    //Ready to jump state
    ready = 1;
    
    //Face left
    image_xscale = -1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="25">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Begin countdown state

//Start the countdown if there is a time limit
if (global.time &gt; 0)
    alarm[1] = 1;
else
    alarm[2] = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="24">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Enter castle

if (instance_exists(obj_incastle)) {

    //Do the victory pose
    if (ready2 == 0) 
    &amp;&amp; (x &gt; obj_incastle.x) {
    
        //Snap in castle door
        x = obj_incastle.x;
    
        //Stop in the door
        ready2 = 1;
        
        //Stop moving
        hspeed = 0;
        
        //Move again after a while
        alarm[3] = 60;
    }    
    else if (x &gt; obj_incastle.x+8) {
    
        //Set up in-door state
        if (ready == 2)
            ready = 4;

        //If the object is in-door state, make him enter
        else if ((ready == 4) &amp;&amp; (x &gt; obj_incastle.x+24)) {
        
            //Snap to the castle's door
            x = obj_incastle.x+26;
            
            //Inside castle state
            ready = 5;
            
            //Stop moving
            hspeed = 0;
            
            //Begin countdown state
            event_user(15);
        }
    }
    
    //Decrement alpha
    if (ready2 == 2)
    &amp;&amp; (x &gt; obj_incastle.x)
        image_alpha -= 0.05;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="23">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Animate

//When on flagpole
if (ready &lt; 2) {

    //Animate
    if (vspeed &gt; 0)
        image_speed = 0.15;
    else {
    
        image_speed = 0;
        image_index = 0;
    }
    
    //Set climbinb pose
    if (global.player == 0)
        sprite_index = scr_mario_climb();
    else
        sprite_index = scr_luigi_climb();
    
}

//When not on flagpole
else {

    //When on the ground, use walking sprite.
    if (gravity = 0) { 
    
        if (hspeed == 0) {
        
            //Set idle pose
            image_speed = 0;
            if (alarm[3] &gt; 40)
                image_index = 1;
            else
                image_index = 2;
            
            //Set the sprite
            if (global.player == 0)
                sprite_index = scr_mario_pose();
            else
                sprite_index = scr_luigi_pose();
            
        }
        else {
        
            //Animate
            image_speed = 0.065+abs(hspeed)/7.5;
            
            //Set walking pose
            if (global.player == 0)
                sprite_index = scr_mario_walk();
            else
                sprite_index = scr_luigi_walk();            
        }
    }
    
    //Otherwise
    else {
    
        //Use the correct image index
        image_index = 0;        
        
        //Use the jump sprite
        if (global.player == 0)
            sprite_index = scr_mario_jump();
        else
            sprite_index = scr_luigi_jump();
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Set up the next level

global.world = flagpole.nextlevel;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw the player

draw_sprite_ext(sprite_index, -1, x, y+1, image_xscale, 1, 0, c_white, image_alpha);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
