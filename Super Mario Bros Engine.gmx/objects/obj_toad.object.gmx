<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_toad</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-5</depth>
  <persistent>0</persistent>
  <parentName>obj_physicsparent</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///A toad, that mushroom retainer that we all hate &gt;:3

/*
//  This object uses creation code
//
//      nextlevel = Next level in the game
*/

//Default variables
nextlevel = "1-1";

//Do not animate.
image_speed = 0;
image_index = 0;

//Check if the time is equal to 0.
ready = 0;

//Display "Thank you Mario!"
display = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Make Toad jump

//Play 'Jump' sound
audio_play_sound(snd_jump, 0, false);

//Set the vertical speed
vspeed = -3;

//Boost jump
y--;

//Jump again
alarm[3] = 120;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Save the game and go to the next area

//Set the new world
global.world = nextlevel;

//Go to level start
room_goto(rm_levelstart);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Take points off the time, and add to the score

//If there is no time left
if (global.time == 0) {

    //If the 'World Clear' theme is not playing
    if (!audio_is_playing(bgm_worldclear))
    &amp;&amp; (!ready) {     
        
        //Prevent a cycle
        ready = true;
                
        //Go to the next area
        alarm[2] = 120;  
    }
    
    //Otherwise, take points out of time
    else    
        alarm[1] = 1;
}

//Otherwise
else {

    //Decrement a second from the timer
    if (global.time &gt; 0) {
    
        //Decrement
        global.time--;
        
        //Get 50 points/second
        score += 50;
        
        //Repeat the process
        alarm[1] = 1;
        
        //Begin timer loop
        if (global.time &gt; 1) {
        
            if (!audio_is_playing(snd_count))
                audio_play_sound(snd_count, 0, true);
        }
        else if (global.time == 1) {
        
            audio_stop_sound(snd_count);
            audio_play_sound(snd_countend, 0, false);
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Display 'Thank you mario!'.

//If the text is not fully displayed
if (display &lt; 3) {

    display++;
    alarm[0] = 60;
}

//Otherwise, take points off the time and add to score
else
    alarm[1] = 120;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Animate toad

//If the player exists
if (instance_exists(obj_player_axe)) {

    //If jumping
    if (vspeed != 0)
        image_index = 1;
        
    //Otherwise,
    else {
    
        //If the player is listening
        if (obj_player_axe.ready == 3)
        &amp;&amp; (obj_levelcontrol.x &gt; room_width-128)
            image_speed = 0.1;
            
        //Otherwise, do not animate
        else {
        
            image_speed = 0;
            image_index = 0;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Toad and 'Thank you, Mario' text.

//Draw toad
draw_sprite_ext(sprite_index, -1, x, y+1, 1, 1, image_angle, c_white, 1);

//Align the text
draw_set_halign(fa_center);
draw_set_valign(fa_center);

//Set the text colour
draw_set_color(c_white);

//Set the text alpha
draw_set_alpha(1);

//Display 'THANK YOU MARIO!'
if (display &gt; 0)    
    draw_text(view_xview[0]+128,view_yview[0]+72,string_upper("THANK YOU MARIO!"));
    
//Display 'BUT OUR PRINCESS'
if (display &gt; 1)
    draw_text(view_xview[0]+128,view_yview[0]+104,string_upper("BUT OUR PRINCESS"));    

//Display 'IS IN ANOTHER CASTLE'
if (display &gt; 2)
    draw_text(view_xview[0]+128,view_yview[0]+120,string_upper("IS IN ANOTHER CASTLE!"));      

//Re-align the text
draw_set_valign(fa_top);
draw_set_halign(fa_left);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
