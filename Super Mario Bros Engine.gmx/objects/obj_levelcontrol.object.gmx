<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_event</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>1000000</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>spr_camera</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Level Control object

//Default values (Check init_globals_mus for the number of the tracks)
levelmusic = noone;
leveltime = 0;
drawblack = 0;

//Begin playing the music
alarm[0] = 2;

//The music can play?
musicdisable = 0;

//Disable barrier
barrier = 1;
alarm[5] = 3;

//Create HUD
instance_create(0,0,obj_hud);

//Jump to position
x = view_xview[view_current]+128;
target = noone;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Disable barrier

barrier = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Kill the player

instance_create(obj_playerparent.x, obj_playerparent.y, obj_player_dead);
with (obj_playerparent) instance_destroy();
exit;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Warn that the timer is running out

//Play 'Hurry' sound
audio_play_sound(snd_hurry, 0, false);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Decrement time

//If there's still time left
if (instance_exists(obj_playerparent)) 
&amp;&amp; (global.time &gt; 0) {

    //Decrement it by 1
    global.time--;
    
    //Repeat the process
    alarm[2] = 24;
    
    //If there's 100 seconds left, warn the player
    if (global.time == 101)
        alarm[3] = 24;
        
    //Otherwise, if there's 0 seconds left, kill the player.
    else if (global.time == 1)
        alarm[4] = 25;
}
else
    alarm[2] = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Stop music

audio_stop_sound(global._music[levelmusic]);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Loop given theme

//If music is not disabled
if (musicdisable == false) {
        
    //If no music has been set
    if (levelmusic == noone)
    exit;
    
    //Otherwise, play it
    if (!audio_is_playing(global._music[levelmusic]))
        audio_loop_sound(global._music[levelmusic], global._st[levelmusic], global._en[levelmusic], 48000, 1);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Handle position and instance deactivation

//Set the target
event_user(2);

//If the target exists
if (target != noone) {

    //If the camera is way far away from the room width
    if (x-128 &lt; room_width-256) {
    
        //If the target is greater than x
        if (target.x+8 &gt; x) {
        
            x = target.x+8;
            hspeed = 0;
        }
        
        //Otherwise
        else {
        
            //If the target is the player object
            if (target == obj_playerparent) {
            
                //If the horizontal speed is greater than 0.5
                if (target.hspeed &gt; 0.5) {
                
                    //If the player object x is lower than x-32
                    if (obj_playerparent.x &gt; x-32)
                        hspeed = target.hspeed-0.5;
                    else
                        hspeed = 0;
                }
                else
                    hspeed = 0;
            }
            
            //Otherwise, if the target is climbing down a flagpole
            else if (target == obj_player_goal) {
            
                //If the horizontal speed is greater than 0.5
                if (target.hspeed &gt; 0.5) {
                
                    //If the player object x is lower than x-32
                    if (obj_player_goal.x &gt; x-32)
                        hspeed = target.hspeed-0.5;
                    else
                        hspeed = 0;
                }
                else
                    hspeed = 0;                      
            }
        }
    }
    
    //Otherwise
    else {
    
        hspeed = 0;
        x = xprevious;
    }
    
    //Prevent the camera from reaching the right-edge
    if (x &gt; room_width-128)
        x = room_width-128;
}

//Otherwise, stop it
else
    hspeed = 0;

//Prevent the player from getting outside the view and set the view speed
if (barrier == 0) {

    event_user(0);
    view_hspeed[0] = 10;
}
else
    view_hspeed[0] = -1;

//Deactivate enemies outside the view
instance_deactivate_object(obj_bowserparent);
instance_deactivate_object(obj_deactenemyparent);
instance_deactivate_object(obj_deactivateparent);

//Activate deactivated instances inside the activation region
instance_activate_region(view_xview - 32, view_yview - 32, view_wview[view_current] + 96, view_hview[view_current] + 32, true);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Handle music speed and update background position

//Do not modify if the music has not been set
if (levelmusic != noone) {
    
    //If the level has a given amount of time to beat.
    if (leveltime &gt; 0) {
    
        //If the time is lower than 100
        if (global.time &lt; 101) {
        
            //Speed up level music
            audio_sound_pitch(global._music[levelmusic],1.3);
            
            //Speed up 'Invincible' music
            audio_sound_pitch(bgm_invincible, 1.3);
        }
        else {
        
            //Set normal pitch
            audio_sound_pitch(global._music[levelmusic],1);
                    
            //Speed up 'Invincible' music
            audio_sound_pitch(bgm_invincible, 1);        
        }
    }
    else {
    
        //Set normal pitch
        audio_sound_pitch(global._music[levelmusic],1);
            
        //Speed up 'Invincible' music
        audio_sound_pitch(bgm_invincible, 1);    
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Set the x position of the view.

view_xview[view_current] = min(max(0,x-view_wview[view_current]/2), room_width-view_wview[view_current])
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="12">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Set the target

//If the player is the player object
if (instance_exists(obj_playerparent))
    target = obj_playerparent;
    
//Otherwise, if the player is climbing down a flagpole
else if (instance_exists(obj_player_goal))
    target = obj_player_goal;
    
//Otherwise, no target
else
    target = noone;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Destroy player objects

with (obj_player) instance_destroy();
with (obj_player_warp) instance_destroy();
with (obj_player_climb) instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Prevent the player from going outside the view

//If the player is the main one
if (instance_exists(obj_playerparent)) {

    //If the player is at the leftmost boundary
    if (obj_playerparent.x &lt; view_xview[0] + 8) {
    
        //Snap the player 5 pixels at the left of the boundary
        obj_playerparent.x = view_xview[0] + 8;
        
        //Stop the player's horizontal movement
        if (obj_playerparent.hspeed &lt; 0)
            obj_playerparent.hspeed = 0;
    }
    
    //Otherwise, if the player is at the rightmost boundary
    else if (obj_playerparent.x &gt; view_xview[0] + view_wview[0] - 8) {
    
        //Snap the player 5 pixels at the left of the boundary
        obj_playerparent.x = view_xview[0] + view_wview[0] - 8;
        
        //Stop the player's horizontal movement
        if (obj_playerparent.hspeed &gt; 0)
            obj_playerparent.hspeed = 0;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Reset skin and stop music

//Reset skin
global.skin = 0;

//Stop music
audio_stop_all();

//Destroy
instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize level parameters

//Set up the time for the level.
if (leveltime &gt; 0) { //If the timer has been set.

    //If the global time for the level is equal to 0.
    if (global.time = 0) {
    
        global.time = leveltime;
        alarm[2] = 60;
    }
    
    //Otherwise, if the time has been set before.
    else if (global.time &gt; 0)    
        alarm[2] = 60;
}

//If the player came from another room
if (global.postchange != -1) {
    
    //Move the camera to the warp spot
    x = global.postx+64;
    
    //Destroy player objects
    event_user(1);
    
    //Clear NPCs
    with (obj_clearnpcs) {
    
        mode = 1;
        event_user(0);
    }
        
    //Main
    if (global.postchange == 0) {
    
        with (scr_player_retrieve(global.postx, global.posty)) {
        
            if (!place_meeting(global.postx, global.posty+16, obj_solid))
                state = cs_jump;
        }
    }
    
    //Warp
    else if (global.postchange == 1) {
    
        with (instance_create(global.postx, global.posty, obj_player_warp)) {
        
            //Stop it
            speed = 0;
            delay = 1;
            
            //Start moving
            alarm[2] = 54;
        }
    }
    
    //Climb
    else if (global.postchange == 2) {
    
        instance_create(global.postx, global.posty, obj_player_climb);
    }
                        
    //Reset post change
    global.postchange = -1;
}

//Otherwise, move to the next
else {

    //Move to the latest checkpoint if it exists.
    if (instance_exists(global.checkpoint)) {
    
        //Move the camera to the checkpoint position
        x = global.checkpoint.x+80;
        
        //Clear NPCs
        with (obj_clearnpcs) {
        
            mode = 0;
            event_user(0);
        }
        
        //Destroy all player objects        
        event_user(1);
        
        //Create a player object right in position
        scr_player_retrieve(global.checkpoint.x, global.checkpoint.y);
    }
}

//Parallax backgrounds
for (var i=0; i&lt;8; i++)
    xx[i] = view_xview/(1.2+(0.4*i));
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw parallax backgrounds

//Update parallax background position
for (var i=0; i&lt;8; i++)
    xx[i] = view_xview[view_current] / (1.125 + (0.75 * i));

//If the level is a castle maze
if (instance_number(obj_castle) == 0) {
    
    for (var i=0; i&lt;8; i++) {
    
        //If the background exists
        if (background_index[i] != -1)
            draw_background_tiled_horizontal_ext(background_index[i], xx[i]+(background_x[i]+background_hspeed[i]), view_yview[0], 1, 1, 0, background_blend[i], background_alpha[i]);
    }
}

//Draw top
if (drawblack)
    draw_rectangle_colour(view_xview, 0, view_xview + view_wview, 32, c_black, c_black, c_black, c_black, 0);

//Draw pit
if (!instance_exists(obj_water_sf))
    draw_background_ext(bgr_pit, 0, room_height-16, room_width/16, 1, 0, c_white, 0.5);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
