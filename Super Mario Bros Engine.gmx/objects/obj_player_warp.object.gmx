<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_playermarker</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-5</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>spr_mask_warp</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///The player when it's warping through a pipe

//Set the depth
depth = 10;

//Don't stop warping yet
ready = 0;
alarm[0] = 10;

//Delay movement
delay = 0;

//Facing direction
xscale = 1;

//Set up sprite and palette
if (global.player == 0) {
    
    //If moving horizontally
    if (hspeed != 0) {
    
        sprite_index = scr_mario_walk();
        image_speed = 0.15;
    }
        
    //If not moving horizontally
    else {
    
        //If moving up
        if (vspeed &lt; 0) {
        
            sprite_index = scr_mario_walk();
            image_speed = 0;
            image_index = 0;
        }
        
        //Otherwise, if moving down
        else if (vspeed &gt; 0) {
        
            sprite_index = scr_mario_pose();
            image_speed = 0;
            image_index = 3;
        }
    }
    
    //Set palette
    palette_index = pal_mario;
}
else {
    
    //If moving horizontally
    if (hspeed != 0) {
    
        sprite_index = scr_luigi_walk();
        image_speed = 0.15;
    }
        
    //If not moving horizontally
    else {
    
        //If moving up
        if (vspeed &lt; 0) {
        
            sprite_index = scr_luigi_walk();
            image_speed = 0;
            image_index = 0;
        }
        
        //Otherwise, if moving down
        else if (vspeed &gt; 0) {
        
            sprite_index = scr_luigi_pose();
            image_speed = 0;
            image_index = 3;
        }
    }
    
    //Set palette
    palette_index = pal_luigi;
}

//Is the player invincible?
isflashing = 0;
alarm[1] = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Disable pixel fade

with (obj_persistent) tr_pixel = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Allow movement

delay = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Cycle between palettes

//Make the player flash if he's under the effects of the starman.
if (instance_exists(obj_invincibility)) {

    //Make the player flash.
    isflashing++;
    if (isflashing &gt; pal_swap_get_pal_count(palette_index)-1)
        isflashing = 0;
    
    //Repeat the process.
    if (obj_invincibility.alarm[0] &gt; 120)
        alarm[1] = 4;
    else
        alarm[1] = 16;
}
else {

    isflashing = 0;
    alarm[1] = 1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Make the player able to exit the pipes

ready = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Player pipe logic

//If the player is moving vertically
if (vspeed != 0) {

    //If moving down
    if (vspeed &gt; 0) {
    
        //Set the animation
        image_speed = 0;
        image_index = 3;
        
        //Set the sprite based on the player
        if (global.player == 0)
            sprite_index = scr_mario_pose();
        else
            sprite_index = scr_luigi_pose();        
    }
    else {
    
        //Set the animation
        image_speed = 0;
        image_index = 0;
        
        //Set the sprite based on the player
        if (global.player == 0)
            sprite_index = scr_mario_walk();
        else
            sprite_index = scr_luigi_walk();             
    }
}
    
//Otherwise, if the player is moving horizontally
else {

    //Set the animation
    image_speed = 0.15;

    //Set the animation
    if (global.player == 0)
        sprite_index = scr_mario_walk();
    else
        sprite_index = scr_luigi_walk();       
}

//Update boundary and facing direction
event_user(1);

//If the movement is not delayed
if (delay == 0) {

    //Make the player move slower/faster.
    if (collision_point(x-8,y+boundary,obj_solid,0,0))
    &amp;&amp; (collision_point(x+7,y+boundary,obj_solid,0,0))
    &amp;&amp; (collision_point(x-8,bbox_bottom,obj_solid,0,0))
    &amp;&amp; (collision_point(x+7,bbox_bottom,obj_solid,0,0))    
        speed = 3;
    
    else {
    
        //Play a sound if the player is about to exit a pipe.
        if (speed == 3) {
        
            audio_play_sound(snd_warp, 0, false);
        }
    
        //Set the speed of the player
        if (direction == 90)
            speed = 1;
        else
            speed = 0.5;
    }
    
    //Make the player exit the pipe.
    if (ready)
    &amp;&amp; (!collision_rectangle(x-8,y+boundary,x+7,bbox_bottom,obj_solid,0,0))
        event_user(0);
}

//Make invisible if moving horizontally
if (direction == 0) || (direction == 180) {

    if (speed == 3)
        visible = 0;
    else
        visible = 1;
}
else
    visible = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_right">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Go right!

//Set the direction.
direction = 0;

//Snap to position.
move_snap(16,16);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_left">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Go left!

//Set the direction.
direction = 180;

//Snap to position.
move_snap(16,16);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_down">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Go down!

//Set the direction.
direction = 270;

//Snap to position.
move_snap(16,16);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_up">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Go up!

//Set the direction.
direction = 90;

//Snap to position.
move_snap(16,16);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_warproom">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Warp to the given destination room

//Set pixel fade mode
with (obj_persistent) tr_pixel = 1;

//With the warp object.
with (other) {

    //If the position needs to be changed in the new room.
    if (postchange != -1) {
    
        //Remember the spawn type
        global.postchange = postchange;
        
        //Remember the x spawn position.
        global.postx = postx+16;
        
        //Remember the y spawn position.
        global.posty = posty+16;
    }
    
    //Go to the destination room
    room_goto(myroom);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Update boundary and facing direction

if (global.powerup == cs_small)
    boundary = 0;
else
    boundary = -8;

//Change the facing direction of the player.
if (hspeed &gt; 0)
    image_xscale = 1;
else if (hspeed &lt; 0)
    image_xscale = -1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create player

with (scr_player_retrieve(x,y)) {

    //If the object was moving down, hereby vertical speed
    if (other.vspeed &gt; 0) {
    
        //Set vertical speed
        vspeed = other.vspeed;
        
        //Set jump state
        state = cs_jump;
    }
    
    //Facing direction
    xscale = other.image_xscale;
}

//Destroy
instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw the player

//Set the shader
if (global.player == 0)
    pal_swap_set(pal_mario, isflashing, false);
else
    pal_swap_set(pal_luigi, isflashing, false);

//Draw sprite
draw_sprite_ext(sprite_index, -1, x, y+1, xscale, 1, 0, c_white, image_alpha);

//Reset shader
pal_swap_reset();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
