<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>999990</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Underwater ripple effect

dw = view_wview[view_current];                   //Width
dh = view_hview[view_current];                   //Height

tearings_surface    = surface_create(dw, dh);    //We'll draw on this surface
tearings_y          = 0;
band_num            = 256;                       //How many bands you want on screen
band_height         = dh / band_num;
tearings_x_offset   = 2;                         //How much you want to displace the bands horizontally
tearing_speed       = 4;                         //Change this to speed up/slow down the tearings
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Update width / height

//If the window looses focus
if (window_has_focus() == false) {

    dw = view_wview[view_current];
    dh = view_hview[view_current];  
    if (surface_exists(tearings_surface)) {
    
        surface_free(tearings_surface);
        tearings_surface = -1;
    }
} 
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Force reset display

dw = view_wview[view_current];
dh = view_hview[view_current];   
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw underwater surface

//Create surface if it doesn't exits
if (!surface_exists(tearings_surface)) {

    tearings_surface = surface_create(view_wview[view_current], view_hview[view_current]);
}

//Let's set the target to our surface
surface_set_target(tearings_surface);
draw_clear_alpha(c_black, 0);

//We draw parts of our application surface on tearings surface
for (var current_band = 0; current_band &lt; band_num * 2; current_band++) {

    draw_surface_part(application_surface, 0, band_height * current_band - tearings_y, dw, band_height, sin((degtorad(360) / band_num) * current_band) * tearings_x_offset , band_height * current_band - tearings_y)
}

//Always reset the target surface
surface_reset_target();

//Draw the actual surface
draw_surface_stretched(tearings_surface, round(view_xview[view_current]) - tearings_x_offset, 0, dw + tearings_x_offset * 2, dh);

//Move the Tearings
tearings_y = (tearings_y + tearing_speed) % (band_height * band_num);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
