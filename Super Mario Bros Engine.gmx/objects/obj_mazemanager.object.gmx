<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_event</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>spr_square</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Castle Maze Manager

/*
//  This object uses creation code
//
//      rx               = Camera Restart position
//      maze_index       = Maze index
//      maze_way[0...99] = Number of passages the maze has
*/

//Default variables
rx = 0;
maze_index = 0;
maze_way[maze_index] = noone;

//Passages check
numb = 0;

//Do not draw backgrounds
if (instance_number(obj_castle) == 0)
    instance_create(0,0,obj_castle);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_levelcontrol">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///If the maze is correct

//If all checkpoints have been check, destroy them
if (numb == array_length_1d(maze_index)+1)
    instance_destroy();
    
//Otherwise
else {

    //If the camera is below the room
    if (obj_levelcontrol.y == 432) {
    
        //Reset enemies
        with (obj_reset) alarm[0] = 2;
    
        //With the player
        if (instance_exists(obj_playerparent)) {
        
            with (obj_playerparent) {
            
                x = self.x;
                y = self.y-224;
            }
        }
        
        //Reset numb
        numb = 0;
        
        //With the camera
        with (obj_levelcontrol) y = 0;
        
        //Reset wrong ways
        with (obj_wrongway) check = false;
        
        //Reset correct ways
        for (i=0; i&lt;array_length_1d(maze_index); i++)
            with (maze_way[i]) check = false;
    }
    
    //Otherwise
    else {
    
        //Reset background position
        with (obj_castle) mazeview -= 512 / 1.5;
        
        //Reset camera position
        obj_levelcontrol.x = rx;
        obj_levelcontrol.y = 432;
        obj_levelcontrol.alarm[6] = 3;
        obj_levelcontrol.barrier = true;
    
        //Reset the player position
        if (instance_exists(obj_playerparent)) {
        
            with (obj_playerparent) {
            
                x = ((view_xview*-1)+self.x)+obj_levelcontrol.x-128
                y = self.y+224;
            }
        }
        
        //Reset view
        view_xview[view_current] = 0;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
